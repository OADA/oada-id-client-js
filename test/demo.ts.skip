/**
 * @license
 * Copyright 2015-2022 Open Ag Data Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-env mocha */

// Basically runs through the browser client demo with Saucelabs

import { expect } from 'chai';
import wd from 'wd';
require('colors');
import async from 'async';

const desired = {
  browserName: process.env.BROWSER ?? 'chrome',
  version: process.env.VERSION,
  platform: process.env.PLATFORM,
};
desired.handle = `test in ${desired.browserName}`;
desired.tags = [];

describe(`${desired.browserName} ${desired.version || ''}`, function () {
  const timeout = 60_000;

  // Assumes demo server is running locally (require Sauce Connect tunnel)
  const demoURL = process.env.DEMO_URL ?? 'http://localhost:3007/';

  const username = process.env.SAUCE_USERNAME;
  const accessKey = process.env.SAUCE_ACCESS_KEY;

  let nameSuffix = '';

  this.timeout(10 * timeout);
  let browser;

  before(() => {
    // Checking sauce credential
    if (!process.env.SAUCE_USERNAME || !process.env.SAUCE_ACCESS_KEY) {
      console.warn(
        '\nPlease configure your sauce credential:\n\n' +
          'export SAUCE_USERNAME=<SAUCE_USERNAME>\n' +
          'export SAUCE_ACCESS_KEY=<SAUCE_ACCESS_KEY>\n\n'
      );
      throw new Error('Missing sauce credentials');
    }

    // Http configuration, not needed for simple runs
    wd.configureHttp({
      timeout,
      retryDelay: 15_000,
      retries: 5,
    });

    // Make it work on TravisCI
    if (process.env.TRAVIS) {
      desired['tunnel-identifier'] = process.env.TRAVIS_JOB_NUMBER;
      desired.build = process.env.TRAVIS_BUILD_NUMBER;
      nameSuffix = ` [${process.env.TRAVIS_JOB_NUMBER}]`;
      desired.tags.push(`branch:${process.env.TRAVIS_BRANCH}`);
      if (process.env.TRAVIS_PULL_REQUEST !== 'false') {
        desired.tags.push(
          'pull request',
          `pull request:${process.env.TRAVIS_PULL_REQUEST}`
        );
      }
    }
  });

  beforeEach(function (done) {
    desired.name = this.currentTest.title + nameSuffix;
    browser = wd.remote('ondemand.saucelabs.com', 80, username, accessKey);
    if (process.env.VERBOSE) {
      // Optional extra logging
      browser.on('status', (info) => {
        console.log(info.cyan);
      });
      browser.on('command', (eventType, command, response) => {
        console.log(` > ${eventType.cyan}`, command, (response || '').grey);
      });
      browser.on('http', (meth, path, data) => {
        console.log(` > ${meth.magenta}`, path, (data || '').grey);
      });
    }

    browser.init(desired, done);
  });

  afterEach(function (done) {
    browser.quit(() => {
      browser.sauceJobStatus(this.currentTest.state === 'passed', done);
    });
  });

  describe('browser side client', () => {
    beforeEach((done) => {
      browser.get(demoURL, () => {
        browser.title((error, title) => {
          expect(error).to.be.not.ok;
          expect(title).to.equal('In Browser Usage Example Page');
          done();
        });
      });
    });
    ['access', 'id'].map((tokType) => {
      it(`should get ${tokType} token`, (done) => {
        async.series(
          [
            function (done) {
              browser.elementById(`get_${tokType}`, (error, element) => {
                expect(error).to.be.not.ok;
                expect(element).to.be.ok;
                element.click(done);
              });
            },
            function (done) {
              browser.waitFor(
                new wd.Asserter((browser, callback) => {
                  browser.windowHandles((error, handles) => {
                    expect(error).to.be.not.ok;
                    return callback(error, handles.length === 2);
                  });
                }),
                timeout,
                done
              );
            },
            function (done) {
              browser.windowHandles((error, handles) => {
                expect(error).to.be.not.ok;
                expect(handles[1]).to.be.ok;
                browser.window(handles[1], done);
              });
            },
            function (done) {
              browser.waitForElementByName(
                'username',
                timeout,
                (error, element) => {
                  expect(error).to.be.not.ok;
                  expect(element).to.be.ok;
                  element.clear((error) => {
                    expect(error).to.be.not.ok;
                    element.type('andy', done);
                  });
                }
              );
            },
            function (done) {
              browser.waitForElementByName(
                'password',
                timeout,
                (error, element) => {
                  expect(error).to.be.not.ok;
                  expect(element).to.be.ok;
                  element.clear((error) => {
                    expect(error).to.be.not.ok;
                    element.type('pass', done);
                  });
                }
              );
            },
            function (done) {
              browser.waitForElementByXPath(
                '//input[@type="submit"]',
                timeout,
                (error, element) => {
                  expect(error).to.be.not.ok;
                  expect(element).to.be.ok;
                  element.click(done);
                }
              );
            },
            function (done) {
              browser.waitForElementById('allow', timeout, (error, element) => {
                expect(error).to.be.not.ok;
                expect(element).to.be.ok;
                element.click(done);
              });
            },
            function (done) {
              browser.windowHandles((error, handles) => {
                expect(error).to.be.not.ok;
                expect(handles[0]).to.be.ok;
                browser.window(handles[0], done);
              });
            },
            function (done) {
              browser.waitFor(
                new wd.Asserter((browser, callback) => {
                  browser.windowHandles((error, handles) => {
                    expect(error).to.be.not.ok;
                    return callback(error, handles.length === 1);
                  });
                }),
                timeout,
                done
              );
            },
            function (done) {
              browser.waitForElementById(
                'token',
                new wd.Asserter((element, callback) => {
                  element.text((error, text) => {
                    expect(error).to.be.not.ok;
                    return callback(error, text.length > 0);
                  });
                }),
                timeout,
                done
              );
            },
          ],
          done
        );
      });
    });
  });
});
